pipeline {
    agent any


    environment {
        DOCKER_IMAGE_NAME = "frontend-fleetwise-${GIT_BRANCH}:1.0.0-${BUILD_NUMBER}"
        CONTAINER_NAME = "fleetwise_frontend"
        REMOTE_HOST = "root@212.227.239.95"
    }

    stages {
        stage('Detener Contenedor Existente en Remoto') {
            steps {
                script {
                    sshagent(['miniserver-ssh-key']) {
                        sh """
                            ssh ${env.REMOTE_HOST} '
                            if docker ps -a --format "{{.Names}}" | grep -q "^${env.CONTAINER_NAME}\$"; then
                                docker stop ${env.CONTAINER_NAME}
                                docker rm ${env.CONTAINER_NAME}
                            fi'
                        """
                    }
                }
            }
        }

        stage('Construir Imagen Docker') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'env-vars-frontend-fleetwise', variable: 'env_file')]) {
                        writeFile file: 'src/assets/.env', text: readFile(env_file)
                    }
                    sh "docker build -t ${env.DOCKER_IMAGE_NAME} ."
                }
            }
        }

        stage('Subir Imagen a Servidor Remoto') {
            steps {
                script {
                    sshagent(['miniserver-ssh-key']) {
                        sh "docker save ${env.DOCKER_IMAGE_NAME} | bzip2 | ssh ${env.REMOTE_HOST} 'bunzip2 | docker load'"
                    }
                }
            }
        }

        stage('Ejecutar Contenedor Docker en Remoto') {
            steps {
                script {
                    sshagent(['miniserver-ssh-key']) {
                        sh """
                            ssh ${env.REMOTE_HOST} '
                            docker run --rm --detach --name ${env.CONTAINER_NAME} -p 80:80 ${env.DOCKER_IMAGE_NAME}'
                        """
                    }
                }
            }
        }
    }

    
}
